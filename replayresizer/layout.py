#!/usr/bin/env python
# -*- coding: UTF-8 -*-
#
# generated by wxGlade 0.9.4 on Wed Apr 28 13:12:13 2021
#

import wx

# begin wxGlade: dependencies
# end wxGlade

# begin wxGlade: extracode
# end wxGlade


class PopupPanel(wx.Panel):
    def __init__(self, *args, **kwds):
        # begin wxGlade: PopupPanel.__init__
        kwds["style"] = kwds.get("style", 0)
        wx.Panel.__init__(self, *args, **kwds)
        self.title = wx.StaticText(self, wx.ID_ANY, u"リプレイリサイザ")
        self.thumbnail = wx.StaticBitmap(self, wx.ID_ANY, wx.NullBitmap)
        self.gauge = wx.Gauge(self, wx.ID_ANY, 100)
        self.button_action = wx.Button(self, wx.ID_ANY, "action", style=wx.BORDER_NONE | wx.BU_EXACTFIT)
        self.button_done = wx.Button(self, wx.ID_ANY, "done", style=wx.BORDER_NONE | wx.BU_EXACTFIT)

        self.__set_properties()
        self.__do_layout()

        self.Bind(wx.EVT_BUTTON, self.on_button, self.button_action)
        self.Bind(wx.EVT_BUTTON, self.on_button, self.button_done)
        # end wxGlade

    def __set_properties(self):
        # begin wxGlade: PopupPanel.__set_properties
        self.SetBackgroundColour(wx.Colour(36, 36, 36))
        self.title.SetBackgroundColour(wx.Colour(89, 46, 49))
        self.title.SetForegroundColour(wx.Colour(255, 255, 255))
        self.button_action.SetMinSize((-1, 38))
        self.button_action.SetBackgroundColour(wx.Colour(66, 66, 66))
        self.button_action.SetForegroundColour(wx.Colour(255, 255, 255))
        self.button_done.SetMinSize((-1, 38))
        self.button_done.SetBackgroundColour(wx.Colour(66, 66, 66))
        self.button_done.SetForegroundColour(wx.Colour(255, 255, 255))
        # end wxGlade

    def __do_layout(self):
        # begin wxGlade: PopupPanel.__do_layout
        sizer_1 = wx.BoxSizer(wx.VERTICAL)
        self.sizer_buttons = wx.BoxSizer(wx.HORIZONTAL)
        sizer_1.Add(self.title, 0, wx.EXPAND, 0)
        sizer_1.Add(self.thumbnail, 1, wx.EXPAND, 0)
        static_line_1 = wx.StaticLine(self, wx.ID_ANY)
        sizer_1.Add(static_line_1, 0, wx.EXPAND, 0)
        sizer_1.Add(self.gauge, 0, wx.EXPAND | wx.LEFT | wx.RIGHT | wx.TOP, 4)
        self.sizer_buttons.Add(self.button_action, 1, wx.RIGHT, 4)
        self.sizer_buttons.Add(self.button_done, 1, 0, 0)
        sizer_1.Add(self.sizer_buttons, 0, wx.ALL | wx.EXPAND, 4)
        self.SetSizer(sizer_1)
        sizer_1.Fit(self)
        self.Layout()
        # end wxGlade

    def on_button(self, event):  # wxGlade: PopupPanel.<event_handler>
        print("Event handler 'on_button' not implemented!")
        event.Skip()

# end of class PopupPanel

class MyFrame(wx.Frame):
    def __init__(self, *args, **kwds):
        # begin wxGlade: MyFrame.__init__
        kwds["style"] = kwds.get("style", 0) | wx.FRAME_NO_TASKBAR | wx.FRAME_TOOL_WINDOW | wx.STAY_ON_TOP
        wx.Frame.__init__(self, *args, **kwds)
        self.SetSize((376, 309))

        self.__set_properties()
        self.__do_layout()
        # end wxGlade

    def __set_properties(self):
        # begin wxGlade: MyFrame.__set_properties
        self.SetTitle("frame")
        # end wxGlade

    def __do_layout(self):
        # begin wxGlade: MyFrame.__do_layout
        sizer_3 = wx.BoxSizer(wx.VERTICAL)
        sizer_3.Add((0, 0), 0, 0, 0)
        self.SetSizer(sizer_3)
        self.Layout()
        # end wxGlade

# end of class MyFrame

class SettingsPanel(wx.Frame):
    def __init__(self, *args, **kwds):
        # begin wxGlade: SettingsPanel.__init__
        kwds["style"] = kwds.get("style", 0) | wx.CAPTION | wx.CLOSE_BOX | wx.SYSTEM_MENU
        wx.Frame.__init__(self, *args, **kwds)
        self.SetSize((413, 550))
        self.notebook_1 = wx.Notebook(self, wx.ID_ANY, style=wx.NB_FIXEDWIDTH | wx.NB_TOP)
        self.notebook_1_pane_2 = wx.Panel(self.notebook_1, wx.ID_ANY)
        self.tc_dir_input = wx.TextCtrl(self.notebook_1_pane_2, wx.ID_ANY, "", style=wx.BORDER_NONE)
        self.btn_dir_input = wx.Button(self.notebook_1_pane_2, wx.ID_ANY, u"参照")
        self.tc_dir_output = wx.TextCtrl(self.notebook_1_pane_2, wx.ID_ANY, "", style=wx.BORDER_NONE)
        self.btn_dir_output = wx.Button(self.notebook_1_pane_2, wx.ID_ANY, u"参照")
        self.tc_ffmpeg = wx.TextCtrl(self.notebook_1_pane_2, wx.ID_ANY, "", style=wx.BORDER_NONE)
        self.btn_ffmpeg = wx.Button(self.notebook_1_pane_2, wx.ID_ANY, u"参照")
        self.tc_ffprobe = wx.TextCtrl(self.notebook_1_pane_2, wx.ID_ANY, "", style=wx.BORDER_NONE)
        self.btn_ffprobe = wx.Button(self.notebook_1_pane_2, wx.ID_ANY, u"参照")
        self.spin_listen_delay = wx.SpinCtrl(self.notebook_1_pane_2, wx.ID_ANY, "0", min=0, max=9999)
        self.btn_my_color = wx.ColourPickerCtrl(self.notebook_1_pane_2, wx.ID_ANY)
        self.check_thumbnail = wx.CheckBox(self.notebook_1_pane_2, wx.ID_ANY, u"プレビューサムネイル生成")
        self.check_draw_media_info = wx.CheckBox(self.notebook_1_pane_2, wx.ID_ANY, u"メディア情報を表示")
        self.check_silent_popup = wx.CheckBox(self.notebook_1_pane_2, wx.ID_ANY, u"処理が終わるまでウインドウをポップアップしない")
        self.check_ignore_error = wx.CheckBox(self.notebook_1_pane_2, wx.ID_ANY, u"エラーを無視する")
        self.choice_close_action = wx.Choice(self.notebook_1_pane_2, wx.ID_ANY, choices=[u"閉じる", u"元ファイルを削除し、閉じる", u"リサイズファイルを削除し、閉じる", u"元ファイルとリサイズファイルを削除し、閉じる"])
        self.choice_close_action_with_shift = wx.Choice(self.notebook_1_pane_2, wx.ID_ANY, choices=[u"閉じる", u"元ファイルを削除し、閉じる", u"リサイズファイルを削除し、閉じる", u"元ファイルとリサイズファイルを削除し、閉じる"])
        self.spin_auto_close_delay = wx.SpinCtrl(self.notebook_1_pane_2, wx.ID_ANY, "5", min=0, max=60)
        self.choice_auto_close_when = wx.Choice(self.notebook_1_pane_2, wx.ID_ANY, choices=[u"処理が完了したら", u"ドラッグ＆ドロップしたら"])
        self.notebook_1_ = wx.Panel(self.notebook_1, wx.ID_ANY)
        self.spin_size_limit = wx.SpinCtrl(self.notebook_1_, wx.ID_ANY, "8170", min=200, max=99999999)
        self.notebook_2 = wx.Notebook(self.notebook_1_, wx.ID_ANY)
        self.notebook_2_pane_2 = wx.Panel(self.notebook_2, wx.ID_ANY)
        self.check_hq_fps30 = wx.CheckBox(self.notebook_2_pane_2, wx.ID_ANY, u"30 FPS 制限")
        self.check_hq_no_audio = wx.CheckBox(self.notebook_2_pane_2, wx.ID_ANY, u"オーディオなし")
        self.tc_hq_scale_width = wx.TextCtrl(self.notebook_2_pane_2, wx.ID_ANY, "1280", style=wx.BORDER_NONE)
        self.tc_hq_scale_height = wx.TextCtrl(self.notebook_2_pane_2, wx.ID_ANY, "", style=wx.BORDER_NONE)
        self.spin_hq_size_adjust = wx.SpinCtrlDouble(self.notebook_2_pane_2, wx.ID_ANY, "100.0", min=1.0, max=150.0)
        self.tc_hq_encoder_params = wx.TextCtrl(self.notebook_2_pane_2, wx.ID_ANY, "-deadline realtime -cpu-used -8")
        self.notebook_2_H264AAC = wx.Panel(self.notebook_2, wx.ID_ANY)
        self.check_lq_fps30 = wx.CheckBox(self.notebook_2_H264AAC, wx.ID_ANY, u"30 FPS 制限")
        self.check_lq_no_audio = wx.CheckBox(self.notebook_2_H264AAC, wx.ID_ANY, u"オーディオなし")
        self.tc_lq_scale_width = wx.TextCtrl(self.notebook_2_H264AAC, wx.ID_ANY, "640", style=wx.BORDER_NONE)
        self.tc_lq_scale_height = wx.TextCtrl(self.notebook_2_H264AAC, wx.ID_ANY, "", style=wx.BORDER_NONE)
        self.spin_lq_size_adjust = wx.SpinCtrlDouble(self.notebook_2_H264AAC, wx.ID_ANY, "96.0", min=1.0, max=150.0)
        self.tc_lq_encoder_params = wx.TextCtrl(self.notebook_2_H264AAC, wx.ID_ANY, "-preset veryfast")
        self.notebook_2_pane_3 = wx.Panel(self.notebook_2, wx.ID_ANY)
        self.check_ulq_fps16 = wx.CheckBox(self.notebook_2_pane_3, wx.ID_ANY, u"16 FPS 制限")
        self.check_ulq_no_audio = wx.CheckBox(self.notebook_2_pane_3, wx.ID_ANY, u"オーディオなし")
        self.tc_ulq_scale_width = wx.TextCtrl(self.notebook_2_pane_3, wx.ID_ANY, "320", style=wx.BORDER_NONE)
        self.tc_ulq_scale_height = wx.TextCtrl(self.notebook_2_pane_3, wx.ID_ANY, "", style=wx.BORDER_NONE)
        self.spin_ulq_size_adjust = wx.SpinCtrlDouble(self.notebook_2_pane_3, wx.ID_ANY, "96.0", min=1.0, max=150.0)
        self.tc_ulq_encoder_params = wx.TextCtrl(self.notebook_2_pane_3, wx.ID_ANY, "-preset veryfast")
        self.tc_hq_bitrate = wx.TextCtrl(self.notebook_1_, wx.ID_ANY, "1200")
        self.tc_ulq_bitrate = wx.TextCtrl(self.notebook_1_, wx.ID_ANY, "260")
        self.check_normalized_volume = wx.CheckBox(self.notebook_1_, wx.ID_ANY, u"有効")
        self.spin_volume_db = wx.SpinCtrlDouble(self.notebook_1_, wx.ID_ANY, "2.0", min=-100.0, max=100.0)
        self.spin_volume_normalize_limit_db = wx.SpinCtrlDouble(self.notebook_1_, wx.ID_ANY, "20.0", min=0.0, max=100.0)
        self.notebook_1_pane_3 = wx.Panel(self.notebook_1, wx.ID_ANY)
        self.btn_target_add = wx.Button(self.notebook_1_pane_3, wx.ID_ANY, u"追加")
        self.tc_target_value = wx.TextCtrl(self.notebook_1_pane_3, wx.ID_ANY, "")
        self.btn_target_remove = wx.Button(self.notebook_1_pane_3, wx.ID_ANY, u"削除")
        self.list_target = wx.CheckListBox(self.notebook_1_pane_3, wx.ID_ANY, choices=["\\.mp4$"], style=wx.LB_ALWAYS_SB | wx.LB_SINGLE)
        self.btn_ignore_add = wx.Button(self.notebook_1_pane_3, wx.ID_ANY, u"追加")
        self.tc_ignore_value = wx.TextCtrl(self.notebook_1_pane_3, wx.ID_ANY, "")
        self.btn_ignore_remove = wx.Button(self.notebook_1_pane_3, wx.ID_ANY, u"削除")
        self.list_ignore = wx.CheckListBox(self.notebook_1_pane_3, wx.ID_ANY, choices=["^\\."], style=wx.LB_ALWAYS_SB | wx.LB_SINGLE)
        self.btn_close = wx.Button(self, wx.ID_OK, "")
        self.btn_cancel = wx.Button(self, wx.ID_CANCEL, "")

        self.__set_properties()
        self.__do_layout()

        self.Bind(wx.EVT_BUTTON, self.on_button, self.btn_dir_input)
        self.Bind(wx.EVT_BUTTON, self.on_button, self.btn_dir_output)
        self.Bind(wx.EVT_BUTTON, self.on_button, self.btn_ffmpeg)
        self.Bind(wx.EVT_BUTTON, self.on_button, self.btn_ffprobe)
        self.Bind(wx.EVT_TEXT, self.on_text, self.spin_listen_delay)
        self.Bind(wx.EVT_TEXT, self.on_text, self.tc_hq_scale_width)
        self.Bind(wx.EVT_TEXT, self.on_text, self.tc_hq_scale_height)
        self.Bind(wx.EVT_TEXT, self.on_text, self.tc_lq_scale_width)
        self.Bind(wx.EVT_TEXT, self.on_text, self.tc_lq_scale_height)
        self.Bind(wx.EVT_TEXT, self.on_text, self.tc_ulq_scale_width)
        self.Bind(wx.EVT_TEXT, self.on_text, self.tc_ulq_scale_height)
        self.Bind(wx.EVT_TEXT, self.on_text, self.tc_hq_bitrate)
        self.Bind(wx.EVT_TEXT, self.on_text, self.tc_ulq_bitrate)
        self.Bind(wx.EVT_CHECKBOX, self.on_check, self.check_normalized_volume)
        self.Bind(wx.EVT_BUTTON, self.on_button, self.btn_target_add)
        self.Bind(wx.EVT_TEXT, self.on_text, self.tc_target_value)
        self.Bind(wx.EVT_BUTTON, self.on_button, self.btn_target_remove)
        self.Bind(wx.EVT_CHECKLISTBOX, self.on_select, self.list_target)
        self.Bind(wx.EVT_BUTTON, self.on_button, self.btn_ignore_add)
        self.Bind(wx.EVT_TEXT, self.on_text, self.tc_ignore_value)
        self.Bind(wx.EVT_BUTTON, self.on_button, self.btn_ignore_remove)
        self.Bind(wx.EVT_CHECKLISTBOX, self.on_select, self.list_ignore)
        self.Bind(wx.EVT_BUTTON, self.on_button, self.btn_close)
        self.Bind(wx.EVT_BUTTON, self.on_button, self.btn_cancel)
        # end wxGlade

    def __set_properties(self):
        # begin wxGlade: SettingsPanel.__set_properties
        self.SetTitle(u"設定 - リプレイリサイザ")
        self.SetBackgroundColour(wx.SystemSettings.GetColour(wx.SYS_COLOUR_3DFACE))
        self.tc_dir_input.SetBackgroundColour(wx.SystemSettings.GetColour(wx.SYS_COLOUR_BTNFACE))
        self.tc_dir_output.SetBackgroundColour(wx.SystemSettings.GetColour(wx.SYS_COLOUR_BTNFACE))
        self.tc_ffmpeg.SetBackgroundColour(wx.SystemSettings.GetColour(wx.SYS_COLOUR_BTNFACE))
        self.tc_ffprobe.SetBackgroundColour(wx.SystemSettings.GetColour(wx.SYS_COLOUR_BTNFACE))
        self.btn_my_color.SetMinSize((75, -1))
        self.check_thumbnail.SetValue(1)
        self.choice_close_action.SetSelection(2)
        self.choice_close_action_with_shift.SetSelection(0)
        self.choice_auto_close_when.SetSelection(0)
        self.check_hq_fps30.SetValue(1)
        self.tc_hq_scale_width.SetMinSize((50, -1))
        self.tc_hq_scale_width.SetBackgroundColour(wx.SystemSettings.GetColour(wx.SYS_COLOUR_3DFACE))
        self.tc_hq_scale_height.SetMinSize((50, -1))
        self.tc_hq_scale_height.SetBackgroundColour(wx.SystemSettings.GetColour(wx.SYS_COLOUR_3DFACE))
        self.check_lq_fps30.SetValue(1)
        self.tc_lq_scale_width.SetMinSize((50, -1))
        self.tc_lq_scale_width.SetBackgroundColour(wx.SystemSettings.GetColour(wx.SYS_COLOUR_3DFACE))
        self.tc_lq_scale_height.SetMinSize((50, -1))
        self.tc_lq_scale_height.SetBackgroundColour(wx.SystemSettings.GetColour(wx.SYS_COLOUR_3DFACE))
        self.check_ulq_fps16.Enable(False)
        self.check_ulq_fps16.SetValue(1)
        self.tc_ulq_scale_width.SetMinSize((50, -1))
        self.tc_ulq_scale_width.SetBackgroundColour(wx.SystemSettings.GetColour(wx.SYS_COLOUR_3DFACE))
        self.tc_ulq_scale_height.SetMinSize((50, -1))
        self.tc_ulq_scale_height.SetBackgroundColour(wx.SystemSettings.GetColour(wx.SYS_COLOUR_3DFACE))
        self.tc_hq_bitrate.SetMinSize((50, -1))
        self.tc_ulq_bitrate.SetMinSize((50, -1))
        self.check_normalized_volume.SetValue(1)
        self.spin_volume_db.SetIncrement(0.5)
        self.spin_volume_normalize_limit_db.SetIncrement(0.5)
        # end wxGlade

    def __do_layout(self):
        # begin wxGlade: SettingsPanel.__do_layout
        sizer_4 = wx.BoxSizer(wx.VERTICAL)
        sizer_14 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_30 = wx.BoxSizer(wx.VERTICAL)
        sizer_33 = wx.StaticBoxSizer(wx.StaticBox(self.notebook_1_pane_3, wx.ID_ANY, u"例外ファイル名 (正規表現)"), wx.VERTICAL)
        sizer_32 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_34 = wx.StaticBoxSizer(wx.StaticBox(self.notebook_1_pane_3, wx.ID_ANY, u"対象ファイル名 (正規表現)"), wx.VERTICAL)
        sizer_35 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_12 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_13 = wx.BoxSizer(wx.VERTICAL)
        sizer_20 = wx.StaticBoxSizer(wx.StaticBox(self.notebook_1_, wx.ID_ANY, u"音量調整"), wx.VERTICAL)
        sizer_21 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_23 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_28 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_27 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_26 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_44 = wx.BoxSizer(wx.VERTICAL)
        sizer_47 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_46 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_45 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_25 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_40 = wx.BoxSizer(wx.VERTICAL)
        sizer_43 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_42 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_41 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_24 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_36 = wx.BoxSizer(wx.VERTICAL)
        sizer_39 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_38 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_37 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_29 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_11 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_5 = wx.BoxSizer(wx.VERTICAL)
        sizer_15 = wx.StaticBoxSizer(wx.StaticBox(self.notebook_1_pane_2, wx.ID_ANY, u"終了アクション"), wx.VERTICAL)
        sizer_18 = wx.StaticBoxSizer(wx.StaticBox(self.notebook_1_pane_2, wx.ID_ANY, u"自動実行"), wx.VERTICAL)
        sizer_19 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_17 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_16 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_31 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_10 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_9 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_8 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_7 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_6 = wx.BoxSizer(wx.HORIZONTAL)
        label_1 = wx.StaticText(self.notebook_1_pane_2, wx.ID_ANY, u"キャプチャ監視 ディレクトリ:")
        sizer_6.Add(label_1, 0, wx.ALIGN_CENTER_VERTICAL | wx.LEFT, 4)
        sizer_6.Add(self.tc_dir_input, 1, wx.ALIGN_CENTER_VERTICAL | wx.LEFT | wx.RIGHT, 4)
        sizer_6.Add(self.btn_dir_input, 0, 0, 0)
        sizer_5.Add(sizer_6, 0, wx.BOTTOM | wx.EXPAND, 4)
        label_2 = wx.StaticText(self.notebook_1_pane_2, wx.ID_ANY, u"リサイズ出力 ディレクトリ:")
        sizer_7.Add(label_2, 0, wx.ALIGN_CENTER_VERTICAL | wx.LEFT, 4)
        sizer_7.Add(self.tc_dir_output, 1, wx.ALIGN_CENTER_VERTICAL | wx.LEFT | wx.RIGHT, 4)
        sizer_7.Add(self.btn_dir_output, 0, 0, 0)
        sizer_5.Add(sizer_7, 0, wx.BOTTOM | wx.EXPAND, 4)
        label_3 = wx.StaticText(self.notebook_1_pane_2, wx.ID_ANY, u"FFmpeg.exe パス:")
        sizer_8.Add(label_3, 0, wx.ALIGN_CENTER_VERTICAL | wx.LEFT, 4)
        sizer_8.Add(self.tc_ffmpeg, 1, wx.ALIGN_CENTER_VERTICAL | wx.LEFT | wx.RIGHT, 4)
        sizer_8.Add(self.btn_ffmpeg, 0, 0, 0)
        sizer_5.Add(sizer_8, 0, wx.BOTTOM | wx.EXPAND, 4)
        label_4 = wx.StaticText(self.notebook_1_pane_2, wx.ID_ANY, u"FFprobe.exe パス:")
        sizer_9.Add(label_4, 0, wx.ALIGN_CENTER_VERTICAL | wx.LEFT, 4)
        sizer_9.Add(self.tc_ffprobe, 1, wx.ALIGN_CENTER_VERTICAL | wx.LEFT | wx.RIGHT, 4)
        sizer_9.Add(self.btn_ffprobe, 0, 0, 0)
        sizer_5.Add(sizer_9, 0, wx.BOTTOM | wx.EXPAND, 4)
        label_5 = wx.StaticText(self.notebook_1_pane_2, wx.ID_ANY, u"ファイル監視遅延 (秒):")
        sizer_10.Add(label_5, 0, wx.ALIGN_CENTER_VERTICAL | wx.LEFT, 4)
        sizer_10.Add((0, 0), 1, 0, 0)
        sizer_10.Add(self.spin_listen_delay, 0, 0, 0)
        sizer_5.Add(sizer_10, 0, wx.BOTTOM | wx.EXPAND, 4)
        label_16 = wx.StaticText(self.notebook_1_pane_2, wx.ID_ANY, u"ウインドウカラー:")
        sizer_31.Add(label_16, 1, wx.ALIGN_CENTER_VERTICAL | wx.LEFT, 4)
        sizer_31.Add(self.btn_my_color, 0, wx.EXPAND, 0)
        sizer_5.Add(sizer_31, 0, wx.BOTTOM | wx.EXPAND, 6)
        sizer_5.Add(self.check_thumbnail, 0, wx.BOTTOM | wx.EXPAND, 8)
        sizer_5.Add(self.check_draw_media_info, 0, wx.BOTTOM | wx.EXPAND, 8)
        sizer_5.Add(self.check_silent_popup, 0, wx.BOTTOM | wx.EXPAND, 8)
        sizer_5.Add(self.check_ignore_error, 0, wx.BOTTOM | wx.EXPAND, 8)
        label_7 = wx.StaticText(self.notebook_1_pane_2, wx.ID_ANY, u"通常クリック:")
        sizer_16.Add(label_7, 1, wx.ALIGN_CENTER_VERTICAL | wx.RIGHT, 4)
        sizer_16.Add(self.choice_close_action, 1, 0, 0)
        sizer_15.Add(sizer_16, 0, wx.BOTTOM | wx.EXPAND, 4)
        label_8 = wx.StaticText(self.notebook_1_pane_2, wx.ID_ANY, u"シフトクリック:")
        sizer_17.Add(label_8, 1, wx.ALIGN_CENTER_VERTICAL | wx.RIGHT, 4)
        sizer_17.Add(self.choice_close_action_with_shift, 1, 0, 0)
        sizer_15.Add(sizer_17, 0, wx.BOTTOM | wx.EXPAND, 4)
        label_9 = wx.StaticText(self.notebook_1_pane_2, wx.ID_ANY, u"待ち時間 (秒, 0: 無効):")
        sizer_19.Add(label_9, 1, wx.ALIGN_CENTER_VERTICAL | wx.RIGHT, 4)
        sizer_19.Add(self.spin_auto_close_delay, 0, 0, 0)
        sizer_18.Add(sizer_19, 1, wx.BOTTOM | wx.EXPAND, 4)
        sizer_18.Add(self.choice_auto_close_when, 0, wx.EXPAND, 0)
        sizer_15.Add(sizer_18, 0, wx.EXPAND, 0)
        sizer_5.Add(sizer_15, 0, wx.EXPAND, 0)
        sizer_11.Add(sizer_5, 1, wx.ALL | wx.EXPAND, 8)
        self.notebook_1_pane_2.SetSizer(sizer_11)
        label_13 = wx.StaticText(self.notebook_1_, wx.ID_ANY, u"目標 ファイルサイズ (KB): ")
        sizer_29.Add(label_13, 1, wx.ALIGN_CENTER_VERTICAL, 0)
        sizer_29.Add(self.spin_size_limit, 0, wx.ALIGN_CENTER_VERTICAL, 0)
        sizer_13.Add(sizer_29, 0, wx.BOTTOM | wx.EXPAND, 8)
        sizer_36.Add(self.check_hq_fps30, 0, wx.BOTTOM | wx.EXPAND, 8)
        sizer_36.Add(self.check_hq_no_audio, 0, wx.BOTTOM | wx.EXPAND, 8)
        label_24 = wx.StaticText(self.notebook_2_pane_2, wx.ID_ANY, u"出力解像度:")
        sizer_37.Add(label_24, 1, wx.ALIGN_CENTER_VERTICAL | wx.RIGHT, 4)
        sizer_37.Add(self.tc_hq_scale_width, 0, wx.ALIGN_CENTER_VERTICAL, 0)
        label_25 = wx.StaticText(self.notebook_2_pane_2, wx.ID_ANY, "x")
        sizer_37.Add(label_25, 0, wx.ALIGN_CENTER_VERTICAL | wx.LEFT | wx.RIGHT, 4)
        sizer_37.Add(self.tc_hq_scale_height, 0, wx.ALIGN_CENTER_VERTICAL, 0)
        sizer_36.Add(sizer_37, 0, wx.BOTTOM | wx.EXPAND, 4)
        label_26 = wx.StaticText(self.notebook_2_pane_2, wx.ID_ANY, u"出力サイズ 調整 (%):")
        sizer_38.Add(label_26, 1, wx.ALIGN_CENTER_VERTICAL | wx.RIGHT, 4)
        sizer_38.Add(self.spin_hq_size_adjust, 0, 0, 0)
        sizer_36.Add(sizer_38, 0, wx.BOTTOM | wx.EXPAND, 4)
        label_27 = wx.StaticText(self.notebook_2_pane_2, wx.ID_ANY, u"詳細オプション (libvpx-vp9):")
        sizer_39.Add(label_27, 1, wx.ALIGN_CENTER_VERTICAL | wx.RIGHT, 4)
        sizer_39.Add(self.tc_hq_encoder_params, 1, wx.ALIGN_CENTER_VERTICAL, 0)
        sizer_36.Add(sizer_39, 0, wx.EXPAND, 0)
        sizer_24.Add(sizer_36, 1, wx.ALL | wx.EXPAND, 4)
        self.notebook_2_pane_2.SetSizer(sizer_24)
        sizer_40.Add(self.check_lq_fps30, 0, wx.BOTTOM | wx.EXPAND, 8)
        sizer_40.Add(self.check_lq_no_audio, 0, wx.BOTTOM | wx.EXPAND, 8)
        label_28 = wx.StaticText(self.notebook_2_H264AAC, wx.ID_ANY, u"出力解像度:")
        sizer_41.Add(label_28, 1, wx.ALIGN_CENTER_VERTICAL | wx.RIGHT, 4)
        sizer_41.Add(self.tc_lq_scale_width, 0, wx.ALIGN_CENTER_VERTICAL, 0)
        label_29 = wx.StaticText(self.notebook_2_H264AAC, wx.ID_ANY, "x")
        sizer_41.Add(label_29, 0, wx.ALIGN_CENTER_VERTICAL | wx.LEFT | wx.RIGHT, 4)
        sizer_41.Add(self.tc_lq_scale_height, 0, wx.ALIGN_CENTER_VERTICAL, 0)
        sizer_40.Add(sizer_41, 0, wx.BOTTOM | wx.EXPAND, 4)
        label_30 = wx.StaticText(self.notebook_2_H264AAC, wx.ID_ANY, u"出力サイズ 調整 (%):")
        sizer_42.Add(label_30, 1, wx.ALIGN_CENTER_VERTICAL | wx.RIGHT, 4)
        sizer_42.Add(self.spin_lq_size_adjust, 0, 0, 0)
        sizer_40.Add(sizer_42, 0, wx.BOTTOM | wx.EXPAND, 4)
        label_31 = wx.StaticText(self.notebook_2_H264AAC, wx.ID_ANY, u"詳細オプション (libx264):")
        sizer_43.Add(label_31, 1, wx.ALIGN_CENTER_VERTICAL | wx.RIGHT, 4)
        sizer_43.Add(self.tc_lq_encoder_params, 1, wx.ALIGN_CENTER_VERTICAL, 0)
        sizer_40.Add(sizer_43, 0, wx.EXPAND, 0)
        sizer_25.Add(sizer_40, 1, wx.ALL | wx.EXPAND, 4)
        self.notebook_2_H264AAC.SetSizer(sizer_25)
        sizer_44.Add(self.check_ulq_fps16, 0, wx.BOTTOM | wx.EXPAND, 8)
        sizer_44.Add(self.check_ulq_no_audio, 0, wx.BOTTOM | wx.EXPAND, 8)
        label_32 = wx.StaticText(self.notebook_2_pane_3, wx.ID_ANY, u"出力解像度:")
        sizer_45.Add(label_32, 1, wx.ALIGN_CENTER_VERTICAL | wx.RIGHT, 4)
        sizer_45.Add(self.tc_ulq_scale_width, 0, wx.ALIGN_CENTER_VERTICAL, 0)
        label_33 = wx.StaticText(self.notebook_2_pane_3, wx.ID_ANY, "x")
        sizer_45.Add(label_33, 0, wx.ALIGN_CENTER_VERTICAL | wx.LEFT | wx.RIGHT, 4)
        sizer_45.Add(self.tc_ulq_scale_height, 0, wx.ALIGN_CENTER_VERTICAL, 0)
        sizer_44.Add(sizer_45, 0, wx.BOTTOM | wx.EXPAND, 4)
        label_34 = wx.StaticText(self.notebook_2_pane_3, wx.ID_ANY, u"出力サイズ 調整 (%):")
        sizer_46.Add(label_34, 1, wx.ALIGN_CENTER_VERTICAL | wx.RIGHT, 4)
        sizer_46.Add(self.spin_ulq_size_adjust, 0, 0, 0)
        sizer_44.Add(sizer_46, 0, wx.BOTTOM | wx.EXPAND, 4)
        label_35 = wx.StaticText(self.notebook_2_pane_3, wx.ID_ANY, u"詳細オプション (libx264):")
        sizer_47.Add(label_35, 1, wx.ALIGN_CENTER_VERTICAL | wx.RIGHT, 4)
        sizer_47.Add(self.tc_ulq_encoder_params, 1, wx.ALIGN_CENTER_VERTICAL, 0)
        sizer_44.Add(sizer_47, 0, wx.EXPAND, 0)
        sizer_26.Add(sizer_44, 1, wx.ALL | wx.EXPAND, 4)
        self.notebook_2_pane_3.SetSizer(sizer_26)
        self.notebook_2.AddPage(self.notebook_2_pane_2, u"高品質 VP9/Opus")
        self.notebook_2.AddPage(self.notebook_2_H264AAC, u"低品質 H.264/AAC")
        self.notebook_2.AddPage(self.notebook_2_pane_3, u"超低品質 H.264/AAC")
        sizer_13.Add(self.notebook_2, 0, wx.BOTTOM | wx.EXPAND, 4)
        label_6 = wx.StaticText(self.notebook_1_, wx.ID_ANY, u"高品質モードの条件: ", style=wx.ALIGN_CENTER)
        sizer_27.Add(label_6, 0, wx.ALIGN_CENTER_VERTICAL, 0)
        sizer_27.Add(self.tc_hq_bitrate, 0, wx.ALIGN_CENTER_VERTICAL, 0)
        label_14 = wx.StaticText(self.notebook_1_, wx.ID_ANY, u"Kbps 以上")
        sizer_27.Add(label_14, 0, wx.ALIGN_CENTER_VERTICAL, 0)
        sizer_13.Add(sizer_27, 0, wx.BOTTOM | wx.EXPAND, 4)
        label_12 = wx.StaticText(self.notebook_1_, wx.ID_ANY, u"超低品質モードの条件: ", style=wx.ALIGN_CENTER)
        sizer_28.Add(label_12, 0, wx.ALIGN_CENTER_VERTICAL, 0)
        sizer_28.Add(self.tc_ulq_bitrate, 0, wx.ALIGN_CENTER_VERTICAL, 0)
        label_15 = wx.StaticText(self.notebook_1_, wx.ID_ANY, u"Kbps 以下")
        sizer_28.Add(label_15, 0, wx.ALIGN_CENTER_VERTICAL, 0)
        sizer_13.Add(sizer_28, 0, wx.BOTTOM | wx.EXPAND, 12)
        sizer_20.Add(self.check_normalized_volume, 0, wx.BOTTOM | wx.TOP, 4)
        label_11 = wx.StaticText(self.notebook_1_, wx.ID_ANY, u"目標 音量 (dB):")
        sizer_23.Add(label_11, 1, wx.ALIGN_CENTER_VERTICAL | wx.RIGHT, 4)
        sizer_23.Add(self.spin_volume_db, 0, 0, 0)
        sizer_20.Add(sizer_23, 0, wx.BOTTOM | wx.EXPAND | wx.TOP, 4)
        label_10 = wx.StaticText(self.notebook_1_, wx.ID_ANY, u"調整限界値 (dB):")
        sizer_21.Add(label_10, 1, wx.ALIGN_CENTER_VERTICAL | wx.RIGHT, 4)
        sizer_21.Add(self.spin_volume_normalize_limit_db, 0, 0, 0)
        sizer_20.Add(sizer_21, 0, wx.BOTTOM | wx.EXPAND, 4)
        sizer_13.Add(sizer_20, 0, wx.EXPAND, 0)
        sizer_12.Add(sizer_13, 1, wx.ALL | wx.EXPAND, 8)
        self.notebook_1_.SetSizer(sizer_12)
        sizer_35.Add(self.btn_target_add, 0, wx.RIGHT, 8)
        sizer_35.Add(self.tc_target_value, 1, 0, 0)
        sizer_35.Add(self.btn_target_remove, 0, 0, 0)
        sizer_34.Add(sizer_35, 0, wx.ALL | wx.EXPAND, 4)
        sizer_34.Add(self.list_target, 1, wx.BOTTOM | wx.EXPAND | wx.LEFT | wx.RIGHT, 4)
        sizer_30.Add(sizer_34, 1, wx.ALL | wx.EXPAND, 8)
        sizer_32.Add(self.btn_ignore_add, 0, wx.RIGHT, 8)
        sizer_32.Add(self.tc_ignore_value, 1, 0, 0)
        sizer_32.Add(self.btn_ignore_remove, 0, 0, 0)
        sizer_33.Add(sizer_32, 0, wx.ALL | wx.EXPAND, 4)
        sizer_33.Add(self.list_ignore, 1, wx.BOTTOM | wx.EXPAND | wx.LEFT | wx.RIGHT, 4)
        sizer_30.Add(sizer_33, 1, wx.BOTTOM | wx.EXPAND | wx.LEFT | wx.RIGHT, 8)
        self.notebook_1_pane_3.SetSizer(sizer_30)
        self.notebook_1.AddPage(self.notebook_1_pane_2, u"基本")
        self.notebook_1.AddPage(self.notebook_1_, u"エンコード")
        self.notebook_1.AddPage(self.notebook_1_pane_3, u"対象ファイル")
        sizer_4.Add(self.notebook_1, 1, wx.ALL | wx.EXPAND, 8)
        sizer_14.Add((0, 0), 1, 0, 0)
        sizer_14.Add(self.btn_close, 0, wx.RIGHT, 8)
        sizer_14.Add(self.btn_cancel, 0, wx.RIGHT, 8)
        sizer_4.Add(sizer_14, 0, wx.BOTTOM | wx.EXPAND, 8)
        self.SetSizer(sizer_4)
        self.Layout()
        self.Centre()
        # end wxGlade

    def on_button(self, event):  # wxGlade: SettingsPanel.<event_handler>
        print("Event handler 'on_button' not implemented!")
        event.Skip()

    def on_text(self, event):  # wxGlade: SettingsPanel.<event_handler>
        print("Event handler 'on_text' not implemented!")
        event.Skip()

    def on_check(self, event):  # wxGlade: SettingsPanel.<event_handler>
        print("Event handler 'on_check' not implemented!")
        event.Skip()

    def on_select(self, event):  # wxGlade: SettingsPanel.<event_handler>
        print("Event handler 'on_select' not implemented!")
        event.Skip()

# end of class SettingsPanel

class SetupWizardFrame(wx.Frame):
    def __init__(self, *args, **kwds):
        # begin wxGlade: SetupWizardFrame.__init__
        kwds["style"] = kwds.get("style", 0) | wx.DEFAULT_FRAME_STYLE
        wx.Frame.__init__(self, *args, **kwds)
        self.SetSize((400, 300))

        self.__set_properties()
        self.__do_layout()
        # end wxGlade

    def __set_properties(self):
        # begin wxGlade: SetupWizardFrame.__set_properties
        self.SetTitle("frame_1")
        # end wxGlade

    def __do_layout(self):
        # begin wxGlade: SetupWizardFrame.__do_layout
        sizer_22 = wx.BoxSizer(wx.VERTICAL)
        sizer_22.Add((0, 0), 0, 0, 0)
        self.SetSizer(sizer_22)
        self.Layout()
        # end wxGlade

# end of class SetupWizardFrame

class MyApp(wx.App):
    def OnInit(self):
        self.frame = MyFrame(None, wx.ID_ANY, "")
        self.SetTopWindow(self.frame)
        self.frame.Show()
        return True

# end of class MyApp

if __name__ == "__main__":
    app = MyApp(0)
    app.MainLoop()
